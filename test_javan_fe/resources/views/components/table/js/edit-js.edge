<script>
// Class definition
const KTUsersEditUser = (function () {
  // Shared variables
  const element = document.getElementById('kt_modal_edit_user');
  const form = element.querySelector('#kt_modal_edit_user_form');
  const modal = new bootstrap.Modal(element);

  const resetInputForm = () => {
    $.each($('.ave-form-edit-all'), (x, y) => {
      if ($(y).hasClass('form-select')) {
						$(y).val('').trigger('change');
					} else if ($(y).hasClass('ave-edit-image')) {
            let dataColumn = $(y).data('column')
						$(y).val('');
            let wrapper = $(`#ave-edit-image-wrapper-${dataColumn}`)
            let parent = $(`#ave-edit-image-parent-${dataColumn}`)

						wrapper.attr('style', function(i, style)
            {
                return style && style.replace(/background-image[^;]+;?/g, '');
            });
            wrapper.css('background-image', 'none')
						parent.removeClass('image-input-change')
						parent.addClass('image-input-empty')
					} else {
						$(y).val('');
					}
				  // if ($(y).attr('name') && $(y).val() != '') {
          //   $(y).val('');
				  // }
				});
  }
  // Init add schedule modal
  const initEditUser = () => {
    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/
    const validator = FormValidation.formValidation(
      form,
      {
        fields: {
          user_name: {
            validators: {
              notEmpty: {
                message: 'Full name is required',
              },
            },
          },
          user_email: {
            validators: {
              notEmpty: {
                message: 'Valid email address is required',
              },
            },
          },
        },

        plugins: {
          trigger: new FormValidation.plugins.Trigger(),
          bootstrap: new FormValidation.plugins.Bootstrap5({
            rowSelector: '.fv-row',
            eleInvalidClass: '',
            eleValidClass: '',
          }),
        },
      },
    );

    // Submit button handler
    const submitButton = element.querySelector('[data-kt-users-modal-action-edit="submit"]');
    submitButton.addEventListener('click', (e) => {
    let editData = {};
    let idTarget = $('#kt_modal_edit_user').data('id');
      $.each($('.ave-form-edit-all'), (x, y) => {
        if ($(y).data('form-type') == 'select-tagify') {
          const name = $(y).data('column');
					let value = JSON.parse($(y).val());
          console.log(value);
          console.log(typeof value);
          let dValue = [];
          if(value.length > 0) {
            for(let vaa of value) {
              dValue.push(vaa.value)
            }
          }
					editData[name] = dValue;
          console.log(dValue);
        } else if ($(y).data('column') && $(y).val() != '') {
				  // if ($(y).attr('name') && $(y).val() != '') {
					const name = $(y).data('column');
					const value = $(y).val();
					editData[name] = value;
				  } else if ($(y).hasClass('ave-text-area')) {
          const name = $(y).data('column');
          @each(ckEditor in ckEditorData)
          if(name == '{{ ckEditor }}') {
            let value = ckEditor{{ ckEditor }}Edit.getData()
            editData[name] = value;
          }
          @end
        }
				});
        // console.log(editData);
      e.preventDefault();

      // Validate form before submit
      if (validator) {
        validator.validate().then((status) => {
          // console.log('validated!');

          if (status == 'Valid') {
            // Show loading indication
            submitButton.setAttribute('data-kt-indicator', 'on');

            // Disable button to avoid multiple click
            submitButton.disabled = true;

            let imageFormList = $('.ave-edit-image');
            // console.log(imageFormList?.length);
            if (imageFormList?.length) {
              let uploadedImagePath = {};
              let elementImage = [];
              let dataImageBefore = [];
              $.each(imageFormList, (x, y) => {
                if ($(y).val() != '') {
                  const name = $(y).data('column');
                  dataImageBefore.push($(y).data('img-before'))
                  elementImage.push({name, file: $(y)[0].files[0], })
                }
              });

              if (elementImage.length > 0) {

                let formData = new FormData();
                for (let elemImage of elementImage) {
                  formData.append(elemImage.name, elemImage.file);
                }
                formData.append('oldFile', dataImageBefore);
                formData.append('prefix', '{{imgPath}}');
                $.ajax({
                  url: '{{ uploadUrl }}',
                  type: 'post',
                  data: formData,
                  processData: false,
                  contentType: false,
                  enctype: 'multipart/form-data',
                  cache: false,
                  // async: false,
                })
                .done(function (imageData) {
                    // uploadedImagePath = data;
                    $.ajax({
                      url: `{{ editUrl }}/${idTarget}`,
                      type: 'post',
                      data: {...editData, ...imageData}
                    })
                    .done(function (data) {
                      // console.log(data);
                      // Remove loading indication
                      submitButton.removeAttribute('data-kt-indicator');
  
                      // Enable button
                      submitButton.disabled = false;
                      if(data.status) {
  
                        // Show popup confirmation
                        Swal.fire({
                          text: 'Form has been successfully submitted!',
                          icon: 'success',
                          buttonsStyling: false,
                          confirmButtonText: 'Ok, got it!',
                          customClass: {
                            confirmButton: 'btn btn-primary',
                          },
                        }).then((result) => {
                          if (result.isConfirmed) {
                            datatable.draw();
                            modal.hide();
                            // form.reset();
                            resetInputForm();
                          }
                        });
  
                      } else {
                        Swal.fire({
                          text: JSON.stringify(data.data),
                          icon: 'error',
                          buttonsStyling: false,
                          confirmButtonText: 'Ok, got it!',
                          customClass: {
                            confirmButton: 'btn btn-primary',
                          },
                        });
                      }
  
                    })
                    .fail(function () {
                      alert("error");
                      modal.hide();
                    });
    
                })
                .fail(function (e) {
                  // console.log(e);
                  alert("upload error");
                    // modal.hide();
                });
              } else {

                $.ajax({
                  url: `{{ editUrl }}/${idTarget}`,
                  type: 'post',
                  data: editData
                })
                  .done(function (data) {
                    // console.log(data);
                    // Remove loading indication
                    submitButton.removeAttribute('data-kt-indicator');
    
                    // Enable button
                    submitButton.disabled = false;
                    if(data.status) {
    
                      // Show popup confirmation
                      Swal.fire({
                        text: 'Form has been successfully submitted!',
                        icon: 'success',
                        buttonsStyling: false,
                        confirmButtonText: 'Ok, got it!',
                        customClass: {
                          confirmButton: 'btn btn-primary',
                        },
                      }).then((result) => {
                        if (result.isConfirmed) {
                          datatable.draw();
                          modal.hide();
                          // form.reset();
                          resetInputForm();
                        }
                      });
    
                    } else {
                      Swal.fire({
                      text: JSON.stringify(data.data),
                      icon: 'error',
                      buttonsStyling: false,
                      confirmButtonText: 'Ok, got it!',
                      customClass: {
                        confirmButton: 'btn btn-primary',
                      },
                    });
                    }
    
                  })
                  .fail(function () {
                    alert("error");
                    modal.hide();
                  });
              }

            } else {

                $.ajax({
                  url: `{{ editUrl }}/${idTarget}`,
                  type: 'post',
                  data: editData
                })
                  .done(function (data) {
                    // console.log(data);
                    // Remove loading indication
                    submitButton.removeAttribute('data-kt-indicator');
    
                    // Enable button
                    submitButton.disabled = false;
                    if(data.status) {
    
                      // Show popup confirmation
                      Swal.fire({
                        text: 'Form has been successfully submitted!',
                        icon: 'success',
                        buttonsStyling: false,
                        confirmButtonText: 'Ok, got it!',
                        customClass: {
                          confirmButton: 'btn btn-primary',
                        },
                      }).then((result) => {
                        if (result.isConfirmed) {
                          datatable.draw();
                          modal.hide();
                          // form.reset();
                          resetInputForm();
                        }
                      });
    
                    } else {
                      Swal.fire({
                      text: JSON.stringify(data.data),
                      icon: 'error',
                      buttonsStyling: false,
                      confirmButtonText: 'Ok, got it!',
                      customClass: {
                        confirmButton: 'btn btn-primary',
                      },
                    });
                    }
    
                  })
                  .fail(function () {
                    alert("error");
                    modal.hide();
                  });
            }
          } else {
            // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/
            Swal.fire({
              text: 'Sorry, looks like there are some errors detected, please try again.',
              icon: 'error',
              buttonsStyling: false,
              confirmButtonText: 'Ok, got it!',
              customClass: {
                confirmButton: 'btn btn-primary',
              },
            });
          }
        });
      }
    });

    // Cancel button handler
    const cancelButton = element.querySelector('[data-kt-users-modal-action-edit="cancel"]');
    cancelButton.addEventListener('click', (e) => {
      e.preventDefault();

      Swal.fire({
        text: 'Are you sure you would like to cancel?',
        icon: 'warning',
        showCancelButton: true,
        buttonsStyling: false,
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, return',
        customClass: {
          confirmButton: 'btn btn-primary',
          cancelButton: 'btn btn-active-light',
        },
      }).then((result) => {
        if (result.value) {
          form.reset(); // Reset form
          modal.hide();
        } else if (result.dismiss === 'cancel') {
          Swal.fire({
            text: 'Your form has not been cancelled!.',
            icon: 'error',
            buttonsStyling: false,
            confirmButtonText: 'Ok, got it!',
            customClass: {
              confirmButton: 'btn btn-primary',
            },
          });
        }
      });
    });

    // Close button handler
    const closeButton = element.querySelector('[data-kt-users-modal-action-edit="close"]');
    closeButton.addEventListener('click', (e) => {
      e.preventDefault();

      Swal.fire({
        text: 'Are you sure you would like to cancel?',
        icon: 'warning',
        showCancelButton: true,
        buttonsStyling: false,
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, return',
        customClass: {
          confirmButton: 'btn btn-primary',
          cancelButton: 'btn btn-active-light',
        },
      }).then((result) => {
        if (result.value) {
          form.reset(); // Reset form
          modal.hide();
        } else if (result.dismiss === 'cancel') {
          Swal.fire({
            text: 'Your form has not been cancelled!.',
            icon: 'error',
            buttonsStyling: false,
            confirmButtonText: 'Ok, got it!',
            customClass: {
              confirmButton: 'btn btn-primary',
            },
          });
        }
      });
    });
  };

  return {
    // Public functions
    init() {
      initEditUser();
    },
  };
}());

// On document ready
KTUtil.onDOMContentLoaded(() => {
  KTUsersEditUser.init();
});
</script>